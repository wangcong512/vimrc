" ----------------------------------------------------------------------------
" Vim-Plug:Plgin management and setting
" ----------------------------------------------------------------------------
set rtp+=$VIM/vimfiles/bundle/Vundle.vim/
call vundle#begin('$VIM/vimfiles/bundle/')

let mapleader = ','
let g:mapleader = ','
"let s:vim8 = has('patch-8.0.0039') && exists('*job_start')
set completeopt=longest,menu "behaviour of insert mode completion

"if !exists('g:bigvim_minor_plugins')
"    let g:bigvim_minor_plugins=['php', 'css',]
"endif

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" :PlugInstall     install
" :PlugInstall!    update
" :PlugClean       remove plugin not in list
" ----------------------------------------------------------------------------
"Bundle 'VundleVim/Vundle.vim'

" display
Bundle 'Valloric/MatchTagAlways'
Bundle 'bling/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
Bundle 'gorodinskiy/vim-coloresque'
Bundle 'airblade/vim-gitgutter'
Bundle 'inside/vim-search-pulse'
Bundle 'romainl/vim-cool'
Bundle 'henrik/vim-indexed-search'

" fast move
Bundle 'vim-scripts/matchit.zip'
Bundle 'easymotion/vim-easymotion'
Bundle 'unblevable/quick-scope'

" fast edit
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
"Bundle 'godlygeek/tabular'"自动对齐
"Bundle 'tpope/vim-repeat'
"Bundle 'gcmt/wildfire.vim'
"Bundle 'Raimondi/delimitMate'
"Bundle 'alvan/vim-closetag'
"Bundle 'mattn/emmet-vim'
"Bundle 'terryma/vim-multiple-cursors'
"Bundle 'tpope/vim-surround'
"Bundle 'bronson/vim-trailing-whitespace'
Bundle 'scrooloose/nerdcommenter'
"Bundle 'editorconfig/editorconfig-vim'
Bundle 'Chiel92/vim-autoformat', {'on': 'Autoformat'}
" key mapping: g< and  g>
Bundle 'machakann/vim-swap'
" Visual mode: gs
" text objects, for example: gsi(
Bundle 'christoomey/vim-sort-motion'

" tools
"Bundle 'Valloric/YouCompleteMe', {'do': './install.py'}
Bundle 'Shougo/neocomplete.vim'

"Plug 'ruanyl/vim-eslint', {'do': 'npm install'}
Bundle 'majutsushi/tagbar'
Bundle 'plasticboy/vim-markdown'
"Bundle 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'
Bundle 'szw/vim-maximizer'
"Bundle 'thinca/vim-quickrun'
Bundle 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
"Bundle 'sjl/gundo.vim', {'on': 'GundoToggle'}
"Bundle 'ruanyl/vim-fidget', {'do': 'npm install'}
Bundle 'MattesGroeger/vim-bookmarks'
Bundle 'ruanyl/vim-fixmyjs', {'on': 'Fixmyjs'}
Bundle 'moll/vim-bbye'
"Bundle 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
Bundle 'vim-scripts/BufOnly.vim'
"Bundle 'vim-syntastic/syntastic'

" theme
Bundle 'altercation/vim-colors-solarized'
Bundle 'tomasr/molokai'
Bundle 'morhetz/gruvbox'

" search
Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'tacahiroy/ctrlp-funky'
"Bundle 'j5shi/ctrlp_bdelete.vim'
Bundle 'dyng/ctrlsf.vim', {'on': '<Plug>CtrlSFVwordExec'},{'on': '<Plug>CtrlSFCwordPath'}
Bundle 'ggVGc/vim-fuzzysearch'
Bundle 'rking/ag.vim'
"Bundle 'xolox/vim-misc'
"Bundle 'xolox/vim-lua-ftplugin'

" javascript
"Plug 'pangloss/vim-javascript'
"Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
"Plug 'othree/javascript-libraries-syntax.vim'
"Plug 'kchmck/vim-coffee-script'
"Plug 'heavenshell/vim-jsdoc', {'for': ['javascript', 'jsx', 'typescript']}
"Plug 'burnettk/vim-angular'
"Plug 'mxw/vim-jsx'

" typescript
"Plug 'HerringtonDarkholme/yats.vim'

" PHP
"if count(g:bigvim_minor_plugins, 'php')
    "Plug 'StanAngeloff/php.vim', {'for': 'php'}
    "Plug 'mkusher/padawan.vim', {'for': 'php'}
    "Plug 'ruanyl/vim-php-manual', {'for': 'php'}
    "Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
    "Plug 'fantasyczl/blade-php-vim'
"endif

" CSS
"if count(g:bigvim_minor_plugins, 'css')
    "Plug 'ruanyl/vim-caniuse', {'on': 'Caniuse', 'for': ['css', 'html']}
    "Plug 'hail2u/vim-css3-syntax'
    "Plug 'cakebaker/scss-syntax.vim'
    "Plug 'JulesWang/css.vim'
    "au BufRead,BufNewFile *.scss set filetype=scss.css
"endif

"Load local plugins
if filereadable(expand("~/.vim/vimrc.bundles.local"))
  source ~/.vim/vimrc.bundles.local
endif
call vundle#end()

" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
nnoremap <leader>e :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
"let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

" ----------------------------------------------------------------------------
" tagbar
" require ctags, jsctags
" npm install -g git+https://github.com/ramitos/jsctags.git
" ----------------------------------------------------------------------------
let g:tagbar_type_javascript = {
    \ 'ctagsbin' : 'jsctags'
    \ }
nnoremap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_width = 50

" ----------------------------------------------------------------------------
" ctrlp.vim
" ----------------------------------------------------------------------------
nnoremap <leader>m :CtrlPMRU<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>r :CtrlPBufTag<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](node_modules|target|dist)|\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
"let g:ctrlp_follow_symlinks = 1
"let g:ctrlp_mruf_relative = 1
"let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*'
"call ctrlp_bdelete#init()
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:30'
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d' " Windows
if executable("ag")
    let grepprg = 'ag --nogroup --nocolor'
    let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
     "let g:ctrlp_user_command = 'ag %s / -l --nocolor -g '
endif
let g:ctrlp_by_filename = 1
let g:ctrlp_use_caching = 1
let g:ctrlp_max_files = 1000
let g:ctrlp_max_depth = 10
let g:ctrlp_regexp = 1
"let g:ctrlp_match_func = {}
let g:ctrlp_lazy_update = 100

" ----------------------------------------------------------------------------
" ctrlp-funky
" Mapping: <Leader>fu
" ----------------------------------------------------------------------------
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
nnoremap <Leader>fu :CtrlPFunky<Cr>

" ----------------------------------------------------------------------------
" ctrlsf.vim
" ----------------------------------------------------------------------------
vmap <Leader>s <Plug>CtrlSFVwordExec
nmap <Leader>s <Plug>CtrlSFCwordPath
nmap <Leader>so :CtrlSFToggle<Cr>

" ----------------------------------------------------------------------------
" ag.vim
" ----------------------------------------------------------------------------
nnoremap <Leader><Leader>a :Ag!<space>
"let g:ag_working_path_mode='r'
 let g:ag_highlight=1

" ----------------------------------------------------------------------------
" vim-fuzzysearch
" ----------------------------------------------------------------------------
nnoremap <leader>f :FuzzySearch<cr>
let g:fuzzysearch_hlsearch = 1

" ----------------------------------------------------------------------------
" vim-airline
" ----------------------------------------------------------------------------
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show = 1

" ----------------------------------------------------------------------------
" vim-trailing-whitespace
" Mapping: <leader><space>
" ----------------------------------------------------------------------------
map <leader><space> :FixWhitespace<cr>

" ----------------------------------------------------------------------------
" vim-bookmarks
" ----------------------------------------------------------------------------
let g:bookmark_no_default_key_mappings = 1
nnoremap <Leader><Leader>m :BookmarkToggle<CR>
nnoremap <Leader>i :BookmarkAnnotate<CR>
nnoremap <Leader>a :BookmarkShowAll<CR>
nnoremap <Leader>j :BookmarkNext<CR>
nnoremap <Leader>k :BookmarkPrev<CR>
nnoremap <Leader>c :BookmarkClear<CR>
nnoremap <Leader>x :BookmarkClearAll<CR>

" ----------------------------------------------------------------------------
" vim-maximizer
" ----------------------------------------------------------------------------
nnoremap <tab> :MaximizerToggle<CR>

" ----------------------------------------------------------------------------
" vim-colors-solarized
" ----------------------------------------------------------------------------
let g:solarized_termcolors=16
let g:solarized_termtrans=1
let g:solarized_contrast="high"
let g:solarized_visibility="high"

" ----------------------------------------------------------------------------
" vim-easymotion
" ----------------------------------------------------------------------------
map <space> <Plug>(easymotion-s2)
map  // <Plug>(easymotion-sn)
omap // <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1

" ----------------------------------------------------------------------------
" wildfire.vim
" Mapping: <Enter>
" ----------------------------------------------------------------------------
let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
    \ "html,xml" : ["at"],
\ }
"let g:wildfire_fuel_map = "<ENTER>"
"let g:wildfire_water_map = "<BS>"

" ----------------------------------------------------------------------------
" YouCompleteMe
" ----------------------------------------------------------------------------
let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_key_list_select_completion = ['<Tab>', '<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'objc' : ['->', '.'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::', '(', 'use ', 'namespace ', '\'],
            \   'cs,java,typescript,d,python,perl6,scala,vb,elixir,go' : ['.', 're!(?=[a-zA-Z]{3,4})'],
            \   'html': ['<', '"', '</', ' '],
            \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \   'haskell' : ['.', 're!.'],
            \   'scss,css': [ 're!^\s{2,4}', 're!:\s+' ],
            \ }

" ----------------------------------------------------------------------------
" ultisnips
" ----------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" ----------------------------------------------------------------------------
" delimitMate
" ----------------------------------------------------------------------------
let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_expand_cr = 1

" ----------------------------------------------------------------------------
" tabular
" ----------------------------------------------------------------------------
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a" :Tabularize /"<CR>
vmap <Leader>a" :Tabularize /"<CR>

" ----------------------------------------------------------------------------
" vim-closetag
" ----------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml,*.js"

" ----------------------------------------------------------------------------
" ale
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" syntastic
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" vim-markdown
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" ----------------------------------------------------------------------------
" vim-jsx
" ----------------------------------------------------------------------------
let g:jsx_ext_required = 0 " Allow JSX in normal JS files"

" ----------------------------------------------------------------------------
" vim-jsdoc
" ----------------------------------------------------------------------------
let g:jsdoc_default_mapping = 0
autocmd FileType javascript,typescript nnoremap <Leader><Leader>d :JsDoc<CR>

" ----------------------------------------------------------------------------
" tern_for_vim
" ----------------------------------------------------------------------------
"let tern_show_signature_in_pum = 1
"let tern_show_argument_hints = 'on_hold'
"autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
"autocmd FileType javascript setlocal omnifunc=tern#Complete

autocmd FileType lua setlocal omnifunc=syntaxcomplete#Complete

if has("autocmd") && exists("omnifunc")
     autocmd Filetype *
   \ if &omnifunc == "" |
   \   setlocal omnifunc=syntaxcomplete#Complete |
   \ endif
endif

" ----------------------------------------------------------------------------
" padawan.vim
" Generate Index: :call padawan#GenerateIndex()
" Start Server: :call padawan#StartServer()
" Stop Server: :call padawan#StopServer()
" Restart Server: :call padawan#RestartServer()
" cd ~/.vim/bundle/padawan.vim/padawan.php && composer install
" ----------------------------------------------------------------------------

" ----------------------------------------------------------------------------
" gundo.vim
" ----------------------------------------------------------------------------
nnoremap <leader>h :GundoToggle<CR>
let g:gundo_auto_preview = 0

" ----------------------------------------------------------------------------
" vim-autoformat
"require: npm install -g js-beautify
" ----------------------------------------------------------------------------
autocmd FileType javascript,json,html,css,scss noremap <buffer>  <leader><leader>f :Autoformat<cr>

" ----------------------------------------------------------------------------
" vim-bbye
" ----------------------------------------------------------------------------
nnoremap qq :Bdelete<cr>

" ----------------------------------------------------------------------------
" BufOnly.vim
" ----------------------------------------------------------------------------
nnoremap <silent> qo :BufOnly<CR>

" ----------------------------------------------------------------------------
" Shougo/neocomplete.vim
" ----------------------------------------------------------------------------
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
